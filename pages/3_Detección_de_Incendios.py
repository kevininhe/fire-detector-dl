import streamlit as st
from findFireInImage import findFireInImage
from imageUtilities import decode_image, convertRasterToRGB, convertRasterToRealRGB
import tifffile

OUTPUT_PATH = './outputImage'
WEIGHTS_FILE = './weights/model_unet_Intersection_final_weights.h5'

def segmentacion_semantica():
    if 'images' not in st.session_state:
        st.session_state['images'] = dict()
        st.session_state['model'] = None
        st.session_state['img_counter'] = 0

    st.write("## Detecci칩n de incendios en im치genes satelitales - Segmentaci칩n sem치ntica")

    if not st.session_state['images']:
        st.markdown(
        """
        Este m칩dulo realiza la segmentaci칩n sem치ntica de una im치gen satelital para detectar los p칤xeles con un incendio forestal activo usando el modelo UNet preentrenado.

        Una vez procesada la imagen, se muestra la m치scara con el resultado del procesamiento, siendo los p칤xeles en blanco aquellos con incendio presente.

        Se muestran tambi칠n las bandas SWIR-Blue y RGB de la im치gen para una f치cil visualizaci칩n de esta, dado que las im치genes satelitales no son directamente visibles ya que cuentan con m치s de 3 canales. N칩tese que en las bandas SWIR-Blue es m치s f치cil identificar el incendio forestal, por eso la literatura muestra que son una entrada adecuada para los modelos de detecci칩n de incendios.
        """)
        st.write("#### Cargue de im치gen satelital")
        uploades_files = st.file_uploader("Sube una Imagen Satelital",  type = ['tif'], accept_multiple_files=True)
        if st.button("Detectar Incendios"):
            placeholder = st.empty()
            with placeholder.container():
                st.write("Convirtiendo las Im치genes")
                my_bar = st.progress(0)
                for i, uploaded_file in enumerate(uploades_files):
                    # To read file as bytes:
                    bytes_data = uploaded_file.getvalue()
                    name = uploaded_file.name
                    st.session_state['images'][name] = decode_image(bytes_data, name)
                    percent_complete = (i+1)/len(uploades_files)
                    my_bar.progress(percent_complete)
            
            placeholder.empty()
            st.experimental_rerun()
    else:
        if st.button("Reiniciar"):
            st.session_state['images'] = dict()
            st.session_state['img_counter'] = 0
            st.experimental_rerun()
        if len(st.session_state['images'].keys()) > 0:
            st.subheader("An치lisis de incendios en im치gen satelital")
            st.session_state['img_counter'] = 0
            col1, col2, col3 = st.columns(3)
        for name, path in st.session_state['images'].items():
            st.session_state['img_counter'] += 1
            image = tifffile.imread(path)
            out_image = findFireInImage(name,image,OUTPUT_PATH,WEIGHTS_FILE)
            with col1:
                if st.session_state['img_counter'] == 1:
                    st.write('#### P칤xeles con Incendio Detectado')
                st.markdown('**Im치gen {}**'.format(st.session_state['img_counter']))
                st.image(out_image)
            color_image = convertRasterToRGB(image)
            with col2:
                if st.session_state['img_counter'] == 1:
                    st.write('#### Im치gen satelital en SWIR-Blue')
                st.markdown('**Im치gen {}**'.format(st.session_state['img_counter']))
                st.image(color_image)
            real_RGB_image = convertRasterToRealRGB(image)
            with col3:
                if st.session_state['img_counter'] == 1:
                    st.write('#### Im치gen satelital en RGB')
                st.markdown('**Im치gen {}**'.format(st.session_state['img_counter']))
                st.image(real_RGB_image)
st.set_page_config(page_title="Segmentacion Semantica", page_icon="游댠")
segmentacion_semantica()
